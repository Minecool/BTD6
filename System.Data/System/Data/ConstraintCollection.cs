namespace System.Data;

[DefaultEvent("CollectionChanged")]
[DefaultMember("Item")]
public sealed class ConstraintCollection : InternalDataCollectionBase
{
	private readonly DataTable _table; //Field offset: 0x10
	private readonly ArrayList _list; //Field offset: 0x18
	private int _defaultNameIndex; //Field offset: 0x20
	private CollectionChangeEventHandler _onCollectionChanged; //Field offset: 0x28
	private Constraint[] _delayLoadingConstraints; //Field offset: 0x30
	private bool _fLoadForeignKeyConstraintsOnly; //Field offset: 0x38

	public Constraint Item
	{
		 get { } //Length: 291
	}

	public Constraint Item
	{
		 get { } //Length: 269
	}

	protected virtual ArrayList List
	{
		 get { } //Length: 5
	}

	internal DataTable Table
	{
		internal get { } //Length: 5
	}

	internal ConstraintCollection(DataTable table) { }

	public void Add(Constraint constraint) { }

	internal void Add(Constraint constraint, bool addUniqueWhenAddingForeign) { }

	public Constraint Add(string name, DataColumn[] columns, bool primaryKey) { }

	private void AddForeignKeyConstraint(ForeignKeyConstraint constraint) { }

	private void AddUniqueConstraint(UniqueConstraint constraint) { }

	private void ArrayAdd(Constraint constraint) { }

	private void ArrayRemove(Constraint constraint) { }

	internal string AssignName() { }

	private bool AutoGenerated(Constraint constraint) { }

	private void BaseAdd(Constraint constraint) { }

	private void BaseGroupSwitch(Constraint[] oldArray, int oldLength, Constraint[] newArray, int newLength) { }

	private void BaseRemove(Constraint constraint) { }

	internal bool CanRemove(Constraint constraint, bool fThrowException) { }

	public void Clear() { }

	private static bool CompareArrays(DataColumn[] a1, DataColumn[] a2) { }

	public bool Contains(string name) { }

	internal bool Contains(string name, bool caseSensitive) { }

	internal Constraint FindConstraint(Constraint constraint) { }

	internal ForeignKeyConstraint FindForeignKeyConstraint(DataColumn[] parentColumns, DataColumn[] childColumns) { }

	internal UniqueConstraint FindKeyConstraint(DataColumn[] columns) { }

	internal UniqueConstraint FindKeyConstraint(DataColumn column) { }

	public Constraint get_Item(int index) { }

	public Constraint get_Item(string name) { }

	protected virtual ArrayList get_List() { }

	internal DataTable get_Table() { }

	internal int InternalIndexOf(string constraintName) { }

	private string MakeName(int index) { }

	private void OnCollectionChanged(CollectionChangeEventArgs ccevent) { }

	internal void RegisterName(string name) { }

	public void Remove(Constraint constraint) { }

	internal void UnregisterName(string name) { }

}

